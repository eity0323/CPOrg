<?xml version="1.0" encoding="UTF-8"?>
<project name="custom_rules">

	<!-- 
		基于原生的dex-helper进行修改：
		del: dexedlibs="${out.dexed.absolute.dir}"
		del: forceJumbo="${dex.force.jumbo}"
		del: disableDexMerger="${dex.disable.merger}"
		del: <path refid="out.dex.jar.input.ref" />
	-->
    <!-- Configurable macro, which allows to pass as parameters output directory,
         output dex filename and external libraries to dex (optional) -->
    <macrodef name="dex-helper-plugin">
        <element name="external-libs" optional="yes" />
        <attribute name="nolocals" default="false" />
        <sequential>
            <!-- sets the primary input for dex. If a pre-dex task sets it to
                 something else this has no effect -->
            <property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" />

            <!-- set the secondary dx input: the project (and library) jar files
                 If a pre-dex task sets it to something else this has no effect -->
            <if>
                <condition>
                    <isreference refid="out.dex.jar.input.ref" />
                </condition>
                <else>
                    <path id="out.dex.jar.input.ref">
                        <path refid="project.all.jars.path" />
                    </path>
                </else>
            </if>

            <dex executable="${dx}"
                    output="${intermediate.dex.file}"
                    nolocals="@{nolocals}"
                    verbose="${verbose}">
                <path path="${out.dex.input.absolute.dir}"/>
                <external-libs />
            </dex>
        </sequential>
    </macrodef>
     
     <!-- 基于原生的package-helper进行修改：
    	  del: <jarfile refid="project.all.jars.path" />
          del: <nativefolder path="${native.libs.absolute.dir}" />
		  del: <nativefolder refid="project.library.native.folder.path" />
          del: <nativefolder refid="project.rs.support.libs.path" />
          del: <nativefolder path="${out.rs.libs.absolute.dir}" />
     -->
    <macrodef name="package-helper-plugin">
        <element name="extra-jars" optional="yes" />
        <sequential>
            <apkbuilder
                    outfolder="${out.absolute.dir}"
                    resourcefile="${resource.package.file.name}"
                    apkfilepath="${out.packaged.file}"
                    debugpackaging="${build.is.packaging.debug}"
                    debugsigning="${build.is.signing.debug}"
                    verbose="${verbose}"
                    hascode="${manifest.hasCode}"
                    previousBuildType="${build.last.is.packaging.debug}/${build.last.is.signing.debug}"
                    buildType="${build.is.packaging.debug}/${build.is.signing.debug}">
                <dex path="${intermediate.dex.file}"/>
                <sourcefolder path="${source.absolute.dir}"/>
                <extra-jars/>
            </apkbuilder>
        </sequential>
    </macrodef>
    
    <!--
    	重写-package-resources, 打包插件资源是时不打包依赖的资源  
    	previousBuildType="${build.last.target}"
	   	libraryResFolderPathRefid="project.library.res.folder.path"
	    libraryPackagesRefid="project.library.packages"
	    libraryRFileRefid="project.library.bin.r.file.path"
        buildType="${build.target}"
    -->
    <target name="-package-resources" depends="-crunch">
        <!-- only package resources if *not* a library project -->
        <do-only-if-not-library elseText="Library project: do not package resources..." >
            <aapt executable="${aapt}"
                    command="package"
                    versioncode="${version.code}"
                    versionname="${version.name}"
                    debug="${build.is.packaging.debug}"
                    manifest="${out.manifest.abs.file}"
                    assets="${asset.absolute.dir}"
                    androidjar="${project.target.android.jar}"
                    apkfolder="${out.absolute.dir}"
                    nocrunch="${build.packaging.nocrunch}"
                    resourcefilename="${resource.package.file.name}"
                    resourcefilter="${aapt.resource.filter}"
			        previousBuildType=""
			    	libraryResFolderPathRefid=""
			        libraryPackagesRefid=""
			        libraryRFileRefid=""
			        buildType="default"
                    ignoreAssets="${aapt.ignore.assets}">
                <res path="${out.res.absolute.dir}" />
                <res path="${resource.absolute.dir}" />
                <!-- <nocompress /> forces no compression on any files in assets or res/raw -->
                <!-- <nocompress extension="xml" /> forces no compression on specific file extensions in assets and res/raw -->
            </aapt>
        </do-only-if-not-library>
    </target>
    
    <!--
    	重写-package,使用自定义的package-helper
    -->
    <target name="-package" depends="-dex, -package-resources">
        <!-- only package apk if *not* a library project -->
        <do-only-if-not-library elseText="Library project: do not package apk..." >
            <if condition="${build.is.instrumented}">
                <then>
                    <package-helper-plugin>
                        <extra-jars>
                            <!-- Injected from external file -->
                            <jarfile path="${emma.dir}/emma_device.jar" />
                        </extra-jars>
                    </package-helper-plugin>
                </then>
                <else>
                    <package-helper-plugin />
                </else>
            </if>
        </do-only-if-not-library>
    </target>
    
    <!-- 
    <target name="-compile" depends="-build-setup, -pre-build, -code-gen, -pre-compile">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <path id="project.javac.classpath">
                <path refid="project.all.jars.path" />
                <path refid="tested.project.classpath" />
                	第3方包如果放在libs目录,无需特别指定,放在其他目录,才需要在这里指定的引用第3方包目录
				<fileset file="lib/*.jar" />
            </path>
            <javac encoding="${java.encoding}"
                    source="${java.source}" target="${java.target}"
                    debug="true" extdirs="" includeantruntime="false"
                    destdir="${out.classes.absolute.dir}"
                    bootclasspathref="project.target.class.path"
                    verbose="${verbose}"
                    classpathref="project.javac.classpath"
                    fork="${need.javac.fork}">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <compilerarg line="${java.compilerargs}" />
            </javac>
        </do-only-if-manifest-hasCode>
    </target>
    
        <target name="-dex" depends="-compile, -post-compile, -obfuscate">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <dex-helper >
                <external-libs>
                     	第3方包如果放在libs目录,无需特别指定,放在其他目录,才需要在这里指定的引用第3方包目录
                     <fileset file="lib/*.jar" />
                 </external-libs>
             </dex-helper>
        </do-only-if-manifest-hasCode>
    </target>
     -->
    
    <!--
    	重写-dex，使用自定义的dex-helper
    -->
    <target name="-dex" depends="-compile, -post-compile, -obfuscate">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <!-- only convert to dalvik bytecode is *not* a library -->
            <do-only-if-not-library elseText="Library project: do not convert bytecode..." >
                <!-- special case for instrumented builds: need to use no-locals and need
                     to pass in the emma jar. -->
                <if condition="${build.is.instrumented}">
                    <then>
                        <dex-helper-plugin nolocals="true">
                            <external-libs>
                                <fileset file="${emma.dir}/emma_device.jar" />
                            </external-libs>
                        </dex-helper-plugin>
                    </then>
                    <else>
                        <dex-helper-plugin />
                    </else>
                </if>
            </do-only-if-not-library>
        </do-only-if-manifest-hasCode>
    </target>
    
    <!--
    	重写-code-gen，生成R文件时排除掉依赖库的R文件
		libraryResFolderPathRefid=" "
		libraryPackagesRefid=" "
		libraryRFileRefid=" "
    -->
    <target name="-code-gen">
        <!-- always merge manifest -->
        <mergemanifest
                appManifest="${manifest.abs.file}"
                outManifest="${out.manifest.abs.file}"
                enabled="${manifestmerger.enabled}">
            <library refid="project.library.manifest.file.path" />
        </mergemanifest>

        <do-only-if-manifest-hasCode
                elseText="hasCode = false. Skipping aidl/renderscript/R.java">
            <echo level="info">Handling aidl files...</echo>
            <aidl executable="${aidl}"
                    framework="${project.target.framework.aidl}"
                    libraryBinAidlFolderPathRefid="project.library.bin.aidl.folder.path"
                    genFolder="${gen.absolute.dir}"
                    aidlOutFolder="${out.aidl.absolute.dir}">
                <source path="${source.absolute.dir}"/>
            </aidl>

            <!-- renderscript generates resources so it must be called before aapt -->
            <echo level="info">----------</echo>
            <echo level="info">Handling RenderScript files...</echo>
            <!-- set the rs target prop in case it hasn't been set. -->
            <property name="renderscript.target" value="${project.minSdkVersion}" />
            <renderscript
                    buildToolsRoot="${android.build.tools.dir}"
                    genFolder="${gen.absolute.dir}"
                    resFolder="${out.res.absolute.dir}"
                    rsObjFolder="${out.rs.obj.absolute.dir}"
                    libsFolder="${out.rs.libs.absolute.dir}"
                    targetApi="${renderscript.target}"
                    optLevel="${renderscript.opt.level}"
                    supportMode="${renderscript.support.mode}"
                    binFolder="${out.absolute.dir}"
                    buildType="${build.is.packaging.debug}"
                    previousBuildType="${build.last.is.packaging.debug}">
                <source path="${source.absolute.dir}"/>
            </renderscript>

            <echo level="info">----------</echo>
            <echo level="info">Handling Resources...</echo>
            <aapt executable="${aapt}"
                    command="package"
                    verbose="${verbose}"
                    manifest="${out.manifest.abs.file}"
                    originalManifestPackage="${project.app.package}"
                    androidjar="${project.target.android.jar}"
                    rfolder="${gen.absolute.dir}"
                    nonConstantId="${android.library}"
                    libraryResFolderPathRefid=" "
                    libraryPackagesRefid=" "
                    libraryRFileRefid=" "
                    ignoreAssets="${aapt.ignore.assets}"
                    binFolder="${out.absolute.dir}"
                    proguardFile="${out.absolute.dir}/proguard.txt">
                <res path="${out.res.absolute.dir}" />
                <res path="${resource.absolute.dir}" />
            </aapt>

            <echo level="info">----------</echo>
            <echo level="info">Handling BuildConfig class...</echo>
            <buildconfig
                    genFolder="${gen.absolute.dir}"
                    package="${project.app.package}"
                    buildType="${build.is.packaging.debug}"
                    previousBuildType="${build.last.is.packaging.debug}"/>

        </do-only-if-manifest-hasCode>
    </target>
    
</project>
